// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  username        String    @unique
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  role            String    @default("USER")
  phoneNumber     String?   @unique
  phoneVerified   Boolean   @default(false)
  address         Address[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  orders          Order[]
  cartItems       CartItem[]
  favoriteProducts Product[] @relation("FavoriteProducts")
  reviews         Review[]
  verificationRequests VerificationRequest[]
  wishlistItems   WishlistItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id            String   @id @default(cuid())
  phoneNumber   String
  code          String
  expires       DateTime
  createdAt     DateTime @default(now())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([phoneNumber])
  @@index([userId])
}

model Address {
  id            String  @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  isDefault     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  orders        Order[]
  
  @@index([userId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    String?
  parent      Category? @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToSubcategory")
  
  @@index([parentId])
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  compareAtPrice Float?
  sku         String?       @unique
  barcode     String?       @unique
  weight      Float?        // in kg
  stock       Int           @default(0)
  categories  Category[]
  tags        Tag[]
  images      ProductImage[]
  isAvailable Boolean       @default(true)
  isFeatured  Boolean       @default(false)
  isPublished Boolean       @default(true)
  slug        String        @unique
  variants    ProductVariant[]
  dimensions  Dimension?
  attributes  ProductAttribute[]
  reviews     Review[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
  favoriteBy  User[]        @relation("FavoriteProducts")
  wishlistItems WishlistItem[]
  
  @@index([slug])
  @@index([isAvailable, isPublished])
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  sku       String?  @unique
  price     Float
  stock     Int      @default(0)
  options   String   // Store options like color, size as JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([productId])
}

model ProductAttribute {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([productId])
}

model Dimension {
  id        String   @id @default(cuid())
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  length    Float
  width     Float
  height    Float
  unit      String   @default("cm")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  isMain    Boolean  @default(false)
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([productId])
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId       String?
  address         Address?    @relation(fields: [addressId], references: [id])
  status          String @default("PENDING")
  paymentStatus   String @default("PENDING")  
  paymentMethod   String?
  paymentId       String?
  totalPrice      Float
  items           OrderItem[]
  shippingCost    Float        @default(0)
  tax             Float        @default(0)
  discount        Float        @default(0)
  trackingNumber  String?
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    String
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity     Int
  price        Float
  totalPrice   Float
  variantData  String? // Snapshot of variant options at time of purchase
  
  @@index([orderId])
  @@index([productId])
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating      Int
  title       String?
  comment     String?
  isVerified  Boolean  @default(false)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([productId])
  @@index([userId])
  @@index([rating])
}

model CartItem {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity     Int
  variantData  String?  // JSON string for variant options
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, productId, variantData])
  @@index([userId])
  @@index([productId])
}

model Settings {
  id           String  @id @default(cuid())
  storeName    String  @default("Mobleman")
  storeEmail   String  @default("info@mobleman.com")
  storePhone   String?
  storeAddress String?
  logoUrl      String?
  faviconUrl   String?
  currencyCode String  @default("IRR")
  taxPercent   Float   @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
} 